#!/usr/bin/env bash

#
# internal function: convert ini files to tab separated prpps list
#
_tab_separated_pops_list() {
  grep "^[a-zA-Z0-9_.]\+[ ]*=[ ]*.*$" | sed -E 's|(^[a-zA-Z0-9_.]+)[[:space:]]*=[[:space:]]*(.*)$|\1\t\2|g'
}

_config_option_value() {
  local option=$1; shift;

  _tab_separated_pops_list | grep -m1 -F "${option}" | awk -F\\t "{if (\$1 == \"${option}\") print \$2}"
}

_merged_configs() {
  local service_base_dir config_dir
  service_base_dir=$(get_service_base_dir)
  config_dir="${service_base_dir}/config"

  local temp_file
  temp_file=$(mktemp)

  touch "${temp_file}"
  if [ -f "${config_dir}/user.ini" ]; then
    cat "${config_dir}/user.ini" >> "${temp_file}"
    echo "" >> "${temp_file}"
  fi

  if [ -f "${config_dir}/local.ini" ]; then
    cat "${config_dir}/local.ini" >> "${temp_file}"
    echo "" >> "${temp_file}"
  fi

  if [ -f "${config_dir}/defaults.ini" ]; then
    cat "${config_dir}/defaults.ini" >> "${temp_file}"
    echo "" >> "${temp_file}"
  fi

  cat "${temp_file}"

  rm -f "${temp_file}"
}

#
# find option in config files from the highest priority to low
#
find_in_configs_or_empty() {
  local option=$1; shift;
  local default=$1; shift;

  local option_value
  option_value=$(_merged_configs | _config_option_value "${option}")
  if [ -n "${option_value}" ]; then
    echo "${option_value}"
  elif [ -n "${default}" ]; then
    echo "${default}"
  fi
}

#
# return 1 if option not defined in configs
# nothing to output anyway
#
have_in_configs() {
  local option=$1; shift;
  local found_value
  found_value=$(find_in_configs_or_empty "${option}" "" 2>/dev/null)
  if [ -z "${found_value}" ]; then
    return 1
  fi
}

#
# find option in config files from the highest priority to low
# return special string <unknown> if not found
#
find_in_configs() {
  local option=$1; shift;
  local default=$1

  local option_value
  option_value=$(find_in_configs_or_empty "${option}" "${default}")
  if [ -n "${option_value}" ]; then
    echo "${option_value}"
  else
    echo "<unknown>"
  fi
}

#
# find option in config and parse it 1, true, yes - return 0
# not found, or any other value - return 1
#
enabled_in_configs() {
  local option=$1; shift;
  local default_value=$1;
  if [ -z "${default_value}" ]; then
    default_value=0
  fi

  config_value=$(find_in_configs_or_empty "${option}" "${default_value}" | tr '[:upper:]' '[:lower:]')
  if [ "${config_value}" == "1" ]; then
    return 0
  elif [ "${config_value}" == "true" ]; then
    return 0
  elif [ "${config_value}" == "yes" ]; then
    return 0
  elif [ "${config_value}" == "enabled" ]; then
    return 0
  elif [ "${config_value}" == "enable" ]; then
    return 0
  else
    return 1
  fi
}
