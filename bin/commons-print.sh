#!/usr/bin/env bash

set -e

#
# Print log message to TTY or file
# if print to TTY then try to use colors by level
# args:
# * output_handle: file handle to output: 1 for stdout 2 for stderr
# * level: one of SUCCESS (green), INFO (normal), WARNING (yellow), WARNING (red), FATAL (cyan)
# * message: message to print
#
print_level_message() {
  local output_handle=$1; shift;
  local level=$1; shift;
  local message=$1; shift;

  # ensure that output handle is stderr or stdout
  if [ "${output_handle}" != 1 ] && [ "${output_handle}" != 2 ]; then
    print_level_message 2 FATAL "Unknown 'output_handle'"
    return 1
  fi

  if [ -z "${message}" ]; then
    return 0
  fi

  local need_color color_switcher normal_switcher

  # check if output handle (stderr or stdout) is a terminal
  if test -t "${output_handle}"; then
    local ncolors
    ncolors=$(tput colors)

    if test -n "${ncolors}" && test "${ncolors}" -ge 8; then
      normal_switcher="$(tput sgr0)"
      need_color=1
    fi
  fi

  case ${level} in
  SUCCESS)
    [[ "${need_color}" == 1 ]] && color_switcher="$(tput setaf 2)"
    ;;
  INFO)
    [[ "${need_color}" == 1 ]] && color_switcher="${normal_switcher}"
    ;;
  WARNING)
    [[ "${need_color}" == 1 ]] && color_switcher="$(tput setaf 3)"
    ;;
  ERROR)
    [[ "${need_color}" == 1 ]] && color_switcher="$(tput setaf 1)"
    ;;
  FATAL)
    [[ "${need_color}" == 1 ]] && color_switcher="$(tput setaf 5)"
    ;;
  *)
    print_level_message "${output_handle}" FATAL "Unknown level: ${level}"
    exit 1
    ;;
  esac

  echo >&"${output_handle}" "${color_switcher}${message}${normal_switcher}"
}

#
# Run any long task and log BEGIN and FINISH or FAILED
#
run_long_task_with_log() {
  local run_cmd=$1; shift;
  local message=$1; shift;

  print_level_message 2 INFO "BEGIN ${message}"
  local cmd_exit_usage
  "${run_cmd}" "$@"
  cmd_exit_usage="$?"
  if [ "${cmd_exit_usage}" == 0 ]; then
    print_level_message 2 SUCCESS "FINISH ${message}"
  elif [ "${cmd_exit_usage}" == 130 ]; then
    # By Ctrl+C we got 2 (SIGINT) + 128 = 130
    print_level_message 2 SUCCESS "STOPPED ${message}"
  else
    print_level_message 2 ERROR "FAILED ${message}"
  fi
  return "${cmd_exit_usage}"
}
