#!/usr/bin/env bash

# shellcheck disable=SC2034
VENDOR_NAME="hexway"
# shellcheck disable=SC2034
VENDOR_CODE="hw"
# shellcheck disable=SC2034
BOX="bw"
# shellcheck disable=SC2034
PRODUCT_NAME="Hive"
# shellcheck disable=SC2034
SERVICE_NAME="hw-bw"
# shellcheck disable=SC2034
SERVICE_ENVVAR_PREFIX="HW_BW"


set -e

##
## Returns system user name to run in rootful mode
##
get_service_user_name() {
  
    echo "${VENDOR_CODE}-${BOX}-srv"
}

##
## calculate base target dir
##
get_service_base_dir() {
  local base_dir_var_name base_dir_provided
  base_dir_var_name="${SERVICE_ENVVAR_PREFIX}_BASE_DIR"
  service_user_name=$(get_service_user_name)

  printf -v base_dir_provided '%s' "${!base_dir_var_name}"
  if [ -n "${base_dir_provided}" ]; then
    echo "${base_dir_provided}"
    return 0
  elif [ "$(whoami)" == "${service_user_name}" ] || [ "$(whoami)" == root ]; then
    echo "/opt/${SERVICE_NAME}"
    return 0
  fi
  echo >&2 "To run ${0} under non root user ${USER} env var '${base_dir_var_name}' required"
  return 1
}

SERVICE_BASE_DIR=$(get_service_base_dir)

. "${SERVICE_BASE_DIR}/bin/common-functions.sh"

start_message() {
  local backup_depth="${1}"

  echo "Make full ${PRODUCT_NAME} backup:"
  echo "* stop ${PRODUCT_NAME}"
  echo "* remove old backups (${backup_depth} latest will retain)"
  echo "* backup all data"
  echo "* start ${PRODUCT_NAME}"
}

usage() {
  local script_name="${1}"
  local backup_depth="${2}"

  start_message "${backup_depth}"
  echo "Usage: ${script_name} [backup_depth] [options]"
  echo "Arguments and options:"
  echo "backup_depth: backups amount to store"
  echo "* -h, --help: display this message"
  echo "* -f, --force: make backup without any question"
}

make_full_backup() {
  local backup_depth="${1}"
  stop_prev
  make_backup "${backup_depth}"
  systemctl start "${SERVICE_NAME}"

  # wait, print success or error message
  if ! service_await_internal; then
    # exit on start error
    exit 1
  fi
}

no_question=0
backup_depth=""
show_usage=0
exit_code=""
for arg_val in "$@"; do
  if [ "${arg_val}" == "--help" ] || [ "${arg_val}" == "-h" ]; then
    show_usage=1
    exit_code=0
  elif [ "${arg_val}" == "--force" ] || [ "${arg_val}" == "-f" ]; then
    no_question=1
  elif [[ "${arg_val}" =~ ^[0-9]+$ ]]; then
    backup_depth="${arg_val}"
  else
    echo >&2 "Unknown option: '${arg_val}'"
    show_usage=1
    exit_code=1
    usage "${0}"
    exit 1
  fi
done

backup_depth_config=$(find_in_configs 'product.backup.depth' 3)
backup_depth=${backup_depth:-${backup_depth_config}}

if [ "${show_usage}" == 1 ]; then
    usage "${0}" "${backup_depth}"
fi
if [ -n "${exit_code}" ]; then
  exit "${exit_code}"
fi

start_message "${backup_depth}"
if [ "${no_question}" == 1 ]; then
  make_full_backup "${backup_depth}"
  exit 0
fi

read -p "Are you sure?" -n 1 -r
echo
if [[ "${REPLY}" =~ ^[Yy]$ ]]; then
  make_full_backup "${backup_depth}"
else
  echo "Canceled."
fi